// Generated by gencpp from file sim_msgs/location.msg
// DO NOT EDIT!


#ifndef SIM_MSGS_MESSAGE_LOCATION_H
#define SIM_MSGS_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sim_msgs
{
template <class ContainerAllocator>
struct location_
{
  typedef location_<ContainerAllocator> Type;

  location_()
    : header()
    , bExtractFeature(false)
    , dHDMapPoseX(0.0)
    , dHDMapPoseY(0.0)
    , dHDMapPoseZ(0.0)
    , dHDMapPoseHeading(0.0)
    , dHDMapPosePitch(0.0)
    , dHDMapPoseRoll(0.0)
    , dHDMapVelocityX(0.0)
    , dHDMapVelocityY(0.0)
    , dHDMapVelocityZ(0.0)
    , fConfidence(0.0)
    , cStatus(0)
    , cReserved()
    , nReceivedMSGTimeFlags(0)
    , nSendMSGTimeFlags(0)
    , nImageTimeFlags(0)
    , nFrameNo(0)  {
      cReserved.assign(0);
  }
  location_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , bExtractFeature(false)
    , dHDMapPoseX(0.0)
    , dHDMapPoseY(0.0)
    , dHDMapPoseZ(0.0)
    , dHDMapPoseHeading(0.0)
    , dHDMapPosePitch(0.0)
    , dHDMapPoseRoll(0.0)
    , dHDMapVelocityX(0.0)
    , dHDMapVelocityY(0.0)
    , dHDMapVelocityZ(0.0)
    , fConfidence(0.0)
    , cStatus(0)
    , cReserved()
    , nReceivedMSGTimeFlags(0)
    , nSendMSGTimeFlags(0)
    , nImageTimeFlags(0)
    , nFrameNo(0)  {
  (void)_alloc;
      cReserved.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _bExtractFeature_type;
  _bExtractFeature_type bExtractFeature;

   typedef double _dHDMapPoseX_type;
  _dHDMapPoseX_type dHDMapPoseX;

   typedef double _dHDMapPoseY_type;
  _dHDMapPoseY_type dHDMapPoseY;

   typedef double _dHDMapPoseZ_type;
  _dHDMapPoseZ_type dHDMapPoseZ;

   typedef double _dHDMapPoseHeading_type;
  _dHDMapPoseHeading_type dHDMapPoseHeading;

   typedef double _dHDMapPosePitch_type;
  _dHDMapPosePitch_type dHDMapPosePitch;

   typedef double _dHDMapPoseRoll_type;
  _dHDMapPoseRoll_type dHDMapPoseRoll;

   typedef double _dHDMapVelocityX_type;
  _dHDMapVelocityX_type dHDMapVelocityX;

   typedef double _dHDMapVelocityY_type;
  _dHDMapVelocityY_type dHDMapVelocityY;

   typedef double _dHDMapVelocityZ_type;
  _dHDMapVelocityZ_type dHDMapVelocityZ;

   typedef float _fConfidence_type;
  _fConfidence_type fConfidence;

   typedef uint8_t _cStatus_type;
  _cStatus_type cStatus;

   typedef boost::array<uint8_t, 2>  _cReserved_type;
  _cReserved_type cReserved;

   typedef int64_t _nReceivedMSGTimeFlags_type;
  _nReceivedMSGTimeFlags_type nReceivedMSGTimeFlags;

   typedef int64_t _nSendMSGTimeFlags_type;
  _nSendMSGTimeFlags_type nSendMSGTimeFlags;

   typedef int64_t _nImageTimeFlags_type;
  _nImageTimeFlags_type nImageTimeFlags;

   typedef int64_t _nFrameNo_type;
  _nFrameNo_type nFrameNo;





  typedef boost::shared_ptr< ::sim_msgs::location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sim_msgs::location_<ContainerAllocator> const> ConstPtr;

}; // struct location_

typedef ::sim_msgs::location_<std::allocator<void> > location;

typedef boost::shared_ptr< ::sim_msgs::location > locationPtr;
typedef boost::shared_ptr< ::sim_msgs::location const> locationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sim_msgs::location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sim_msgs::location_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sim_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sim_msgs': ['/home/debbin/catkin_ws/src/sim_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sim_msgs::location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sim_msgs::location_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sim_msgs::location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sim_msgs::location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sim_msgs::location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sim_msgs::location_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sim_msgs::location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7871a553d2e7882977b976bc07865f06";
  }

  static const char* value(const ::sim_msgs::location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7871a553d2e78829ULL;
  static const uint64_t static_value2 = 0x77b976bc07865f06ULL;
};

template<class ContainerAllocator>
struct DataType< ::sim_msgs::location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sim_msgs/location";
  }

  static const char* value(const ::sim_msgs::location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sim_msgs::location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
bool bExtractFeature\n\
\n\
#meter \n\
float64 dHDMapPoseX\n\
float64 dHDMapPoseY\n\
float64 dHDMapPoseZ\n\
\n\
#degree\n\
float64 dHDMapPoseHeading\n\
float64 dHDMapPosePitch\n\
float64 dHDMapPoseRoll\n\
\n\
#quaternion sQuaternion\n\
 \n\
#m/s\n\
float64 dHDMapVelocityX\n\
float64 dHDMapVelocityY\n\
float64 dHDMapVelocityZ\n\
 \n\
#0.0 ~ 1.0\n\
float32 fConfidence \n\
 \n\
uint8 cStatus\n\
 \n\
uint8[2] cReserved\n\
\n\
int64 nReceivedMSGTimeFlags\n\
int64 nSendMSGTimeFlags\n\
int64 nImageTimeFlags\n\
\n\
int64 nFrameNo\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::sim_msgs::location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sim_msgs::location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.bExtractFeature);
      stream.next(m.dHDMapPoseX);
      stream.next(m.dHDMapPoseY);
      stream.next(m.dHDMapPoseZ);
      stream.next(m.dHDMapPoseHeading);
      stream.next(m.dHDMapPosePitch);
      stream.next(m.dHDMapPoseRoll);
      stream.next(m.dHDMapVelocityX);
      stream.next(m.dHDMapVelocityY);
      stream.next(m.dHDMapVelocityZ);
      stream.next(m.fConfidence);
      stream.next(m.cStatus);
      stream.next(m.cReserved);
      stream.next(m.nReceivedMSGTimeFlags);
      stream.next(m.nSendMSGTimeFlags);
      stream.next(m.nImageTimeFlags);
      stream.next(m.nFrameNo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sim_msgs::location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sim_msgs::location_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "bExtractFeature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bExtractFeature);
    s << indent << "dHDMapPoseX: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapPoseX);
    s << indent << "dHDMapPoseY: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapPoseY);
    s << indent << "dHDMapPoseZ: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapPoseZ);
    s << indent << "dHDMapPoseHeading: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapPoseHeading);
    s << indent << "dHDMapPosePitch: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapPosePitch);
    s << indent << "dHDMapPoseRoll: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapPoseRoll);
    s << indent << "dHDMapVelocityX: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapVelocityX);
    s << indent << "dHDMapVelocityY: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapVelocityY);
    s << indent << "dHDMapVelocityZ: ";
    Printer<double>::stream(s, indent + "  ", v.dHDMapVelocityZ);
    s << indent << "fConfidence: ";
    Printer<float>::stream(s, indent + "  ", v.fConfidence);
    s << indent << "cStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cStatus);
    s << indent << "cReserved[]" << std::endl;
    for (size_t i = 0; i < v.cReserved.size(); ++i)
    {
      s << indent << "  cReserved[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cReserved[i]);
    }
    s << indent << "nReceivedMSGTimeFlags: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nReceivedMSGTimeFlags);
    s << indent << "nSendMSGTimeFlags: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nSendMSGTimeFlags);
    s << indent << "nImageTimeFlags: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nImageTimeFlags);
    s << indent << "nFrameNo: ";
    Printer<int64_t>::stream(s, indent + "  ", v.nFrameNo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIM_MSGS_MESSAGE_LOCATION_H
