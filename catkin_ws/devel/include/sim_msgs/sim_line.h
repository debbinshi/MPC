// Generated by gencpp from file sim_msgs/sim_line.msg
// DO NOT EDIT!


#ifndef SIM_MSGS_MESSAGE_SIM_LINE_H
#define SIM_MSGS_MESSAGE_SIM_LINE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <std_msgs/String.h>

namespace sim_msgs
{
template <class ContainerAllocator>
struct sim_line_
{
  typedef sim_line_<ContainerAllocator> Type;

  sim_line_()
    : pos_array()
    , color()  {
    }
  sim_line_(const ContainerAllocator& _alloc)
    : pos_array(_alloc)
    , color(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _pos_array_type;
  _pos_array_type pos_array;

   typedef  ::std_msgs::String_<ContainerAllocator>  _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::sim_msgs::sim_line_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sim_msgs::sim_line_<ContainerAllocator> const> ConstPtr;

}; // struct sim_line_

typedef ::sim_msgs::sim_line_<std::allocator<void> > sim_line;

typedef boost::shared_ptr< ::sim_msgs::sim_line > sim_linePtr;
typedef boost::shared_ptr< ::sim_msgs::sim_line const> sim_lineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sim_msgs::sim_line_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sim_msgs::sim_line_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sim_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sim_msgs': ['/home/debbin/catkin_ws/src/sim_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sim_msgs::sim_line_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sim_msgs::sim_line_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sim_msgs::sim_line_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sim_msgs::sim_line_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sim_msgs::sim_line_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sim_msgs::sim_line_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sim_msgs::sim_line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08bb0bba13ec07969c1f6f6091bab7f9";
  }

  static const char* value(const ::sim_msgs::sim_line_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08bb0bba13ec0796ULL;
  static const uint64_t static_value2 = 0x9c1f6f6091bab7f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::sim_msgs::sim_line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sim_msgs/sim_line";
  }

  static const char* value(const ::sim_msgs::sim_line_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sim_msgs::sim_line_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point32[] pos_array\n\
std_msgs/String color\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
";
  }

  static const char* value(const ::sim_msgs::sim_line_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sim_msgs::sim_line_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_array);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sim_line_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sim_msgs::sim_line_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sim_msgs::sim_line_<ContainerAllocator>& v)
  {
    s << indent << "pos_array[]" << std::endl;
    for (size_t i = 0; i < v.pos_array.size(); ++i)
    {
      s << indent << "  pos_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.pos_array[i]);
    }
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIM_MSGS_MESSAGE_SIM_LINE_H
