# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sim_msgs/location.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class location(genpy.Message):
  _md5sum = "7871a553d2e7882977b976bc07865f06"
  _type = "sim_msgs/location"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

bool bExtractFeature

#meter 
float64 dHDMapPoseX
float64 dHDMapPoseY
float64 dHDMapPoseZ

#degree
float64 dHDMapPoseHeading
float64 dHDMapPosePitch
float64 dHDMapPoseRoll

#quaternion sQuaternion
 
#m/s
float64 dHDMapVelocityX
float64 dHDMapVelocityY
float64 dHDMapVelocityZ
 
#0.0 ~ 1.0
float32 fConfidence 
 
uint8 cStatus
 
uint8[2] cReserved

int64 nReceivedMSGTimeFlags
int64 nSendMSGTimeFlags
int64 nImageTimeFlags

int64 nFrameNo

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','bExtractFeature','dHDMapPoseX','dHDMapPoseY','dHDMapPoseZ','dHDMapPoseHeading','dHDMapPosePitch','dHDMapPoseRoll','dHDMapVelocityX','dHDMapVelocityY','dHDMapVelocityZ','fConfidence','cStatus','cReserved','nReceivedMSGTimeFlags','nSendMSGTimeFlags','nImageTimeFlags','nFrameNo']
  _slot_types = ['std_msgs/Header','bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','float32','uint8','uint8[2]','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,bExtractFeature,dHDMapPoseX,dHDMapPoseY,dHDMapPoseZ,dHDMapPoseHeading,dHDMapPosePitch,dHDMapPoseRoll,dHDMapVelocityX,dHDMapVelocityY,dHDMapVelocityZ,fConfidence,cStatus,cReserved,nReceivedMSGTimeFlags,nSendMSGTimeFlags,nImageTimeFlags,nFrameNo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(location, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bExtractFeature is None:
        self.bExtractFeature = False
      if self.dHDMapPoseX is None:
        self.dHDMapPoseX = 0.
      if self.dHDMapPoseY is None:
        self.dHDMapPoseY = 0.
      if self.dHDMapPoseZ is None:
        self.dHDMapPoseZ = 0.
      if self.dHDMapPoseHeading is None:
        self.dHDMapPoseHeading = 0.
      if self.dHDMapPosePitch is None:
        self.dHDMapPosePitch = 0.
      if self.dHDMapPoseRoll is None:
        self.dHDMapPoseRoll = 0.
      if self.dHDMapVelocityX is None:
        self.dHDMapVelocityX = 0.
      if self.dHDMapVelocityY is None:
        self.dHDMapVelocityY = 0.
      if self.dHDMapVelocityZ is None:
        self.dHDMapVelocityZ = 0.
      if self.fConfidence is None:
        self.fConfidence = 0.
      if self.cStatus is None:
        self.cStatus = 0
      if self.cReserved is None:
        self.cReserved = b'\0'*2
      if self.nReceivedMSGTimeFlags is None:
        self.nReceivedMSGTimeFlags = 0
      if self.nSendMSGTimeFlags is None:
        self.nSendMSGTimeFlags = 0
      if self.nImageTimeFlags is None:
        self.nImageTimeFlags = 0
      if self.nFrameNo is None:
        self.nFrameNo = 0
    else:
      self.header = std_msgs.msg.Header()
      self.bExtractFeature = False
      self.dHDMapPoseX = 0.
      self.dHDMapPoseY = 0.
      self.dHDMapPoseZ = 0.
      self.dHDMapPoseHeading = 0.
      self.dHDMapPosePitch = 0.
      self.dHDMapPoseRoll = 0.
      self.dHDMapVelocityX = 0.
      self.dHDMapVelocityY = 0.
      self.dHDMapVelocityZ = 0.
      self.fConfidence = 0.
      self.cStatus = 0
      self.cReserved = b'\0'*2
      self.nReceivedMSGTimeFlags = 0
      self.nSendMSGTimeFlags = 0
      self.nImageTimeFlags = 0
      self.nFrameNo = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B9dfB().pack(_x.bExtractFeature, _x.dHDMapPoseX, _x.dHDMapPoseY, _x.dHDMapPoseZ, _x.dHDMapPoseHeading, _x.dHDMapPosePitch, _x.dHDMapPoseRoll, _x.dHDMapVelocityX, _x.dHDMapVelocityY, _x.dHDMapVelocityZ, _x.fConfidence, _x.cStatus))
      _x = self.cReserved
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_4q().pack(_x.nReceivedMSGTimeFlags, _x.nSendMSGTimeFlags, _x.nImageTimeFlags, _x.nFrameNo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.bExtractFeature, _x.dHDMapPoseX, _x.dHDMapPoseY, _x.dHDMapPoseZ, _x.dHDMapPoseHeading, _x.dHDMapPosePitch, _x.dHDMapPoseRoll, _x.dHDMapVelocityX, _x.dHDMapVelocityY, _x.dHDMapVelocityZ, _x.fConfidence, _x.cStatus,) = _get_struct_B9dfB().unpack(str[start:end])
      self.bExtractFeature = bool(self.bExtractFeature)
      start = end
      end += 2
      self.cReserved = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.nReceivedMSGTimeFlags, _x.nSendMSGTimeFlags, _x.nImageTimeFlags, _x.nFrameNo,) = _get_struct_4q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B9dfB().pack(_x.bExtractFeature, _x.dHDMapPoseX, _x.dHDMapPoseY, _x.dHDMapPoseZ, _x.dHDMapPoseHeading, _x.dHDMapPosePitch, _x.dHDMapPoseRoll, _x.dHDMapVelocityX, _x.dHDMapVelocityY, _x.dHDMapVelocityZ, _x.fConfidence, _x.cStatus))
      _x = self.cReserved
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_4q().pack(_x.nReceivedMSGTimeFlags, _x.nSendMSGTimeFlags, _x.nImageTimeFlags, _x.nFrameNo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 78
      (_x.bExtractFeature, _x.dHDMapPoseX, _x.dHDMapPoseY, _x.dHDMapPoseZ, _x.dHDMapPoseHeading, _x.dHDMapPosePitch, _x.dHDMapPoseRoll, _x.dHDMapVelocityX, _x.dHDMapVelocityY, _x.dHDMapVelocityZ, _x.fConfidence, _x.cStatus,) = _get_struct_B9dfB().unpack(str[start:end])
      self.bExtractFeature = bool(self.bExtractFeature)
      start = end
      end += 2
      self.cReserved = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.nReceivedMSGTimeFlags, _x.nSendMSGTimeFlags, _x.nImageTimeFlags, _x.nFrameNo,) = _get_struct_4q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B9dfB = None
def _get_struct_B9dfB():
    global _struct_B9dfB
    if _struct_B9dfB is None:
        _struct_B9dfB = struct.Struct("<B9dfB")
    return _struct_B9dfB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4q = None
def _get_struct_4q():
    global _struct_4q
    if _struct_4q is None:
        _struct_4q = struct.Struct("<4q")
    return _struct_4q
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
